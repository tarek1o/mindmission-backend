generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id             Int         @id @default(autoincrement())
  name           String      
  slug           String      @unique
  description    String?
  allowedModels  Json[]     
  isBlocked      Boolean     @default(false)
  isDeleted      Boolean     @default(false)
  users          User[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?  
}

model User {
  id                    Int         @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String      @unique
  isEmailVerified       Boolean     @default(false)
  password              String
  mobilePhone           String?
  whatsAppNumber        String?
  bio                   String?
  picture               String?
  refreshToken          String?
  resetPasswordCode     Json?
  passwordUpdatedTime   DateTime?
  isOnline              Boolean     @default(false)
  isActive              Boolean     @default(true)
  isBlocked             Boolean     @default(false)
  isDeleted             Boolean     @default(false)
  roleId                Int
  role                  Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  student               Student?    
  instructor            Instructor?
  admin                 Admin?
  logs                  Log[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime? 
}

model Student {
  id                  Int                @id @default(autoincrement())
  enrolledCourses     Course[]           @relation("enrolled")
  wishlistCourses     Course[]           @relation("wishlist")
  reviews             Review[]
  userId              Int                @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime? 
}

model Instructor {
  id             Int          @id @default(autoincrement())
  specialization String?
  bref           String?
  noOfRatings    Int          @default(0)
  avgRatings     Float        @default(0)
  skills         Skill[]
  courses        Course[]
  userId         Int          @unique
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime? 
}

model Admin {
  id              Int            @id @default(autoincrement())
  userId          Int            @unique
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Skill {
  id              Int            @id @default(autoincrement())
  content         String
  instructorId    Int
  instructor      Instructor     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String           @unique
  description     String?
  type            CategoryType
  parentId        Int?
  parent          Category?        @relation("self", fields: [parentId], references: [id], onDelete: Cascade)
  childern        Category[]       @relation("self")
  courses         Course[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime? 
}

enum CategoryType {
  CATEGORY
  SUBCATEGORY
  TOPIC
}

model Course {
  id                Int            @id @default(autoincrement())
  title             String
  description       String
  price             Float
  dicountPercentage Float          @default(0)
  isApproved        Boolean        @default(false)
  publishedAt       DateTime?
  hours             Float
  reviews           Review[]       
  enrolledStudents  Student[]      @relation("enrolled")
  wishlistStudents  Student[]      @relation("wishlist")
  instructorId      Int
  instructor        Instructor     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  categoryId        Int
  category          Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  chapters          Chapter[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime? 
}

model Review {
  id              Int            @id @default(autoincrement())
  rating          Float?            
  comment         String         
  reviewerId      Int?
  reviewer        Student?       @relation(fields: [reviewerId], references: [id], onDelete: SetNull)        
  courseId        Int
  course          Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Chapter {
  id                Int            @id @default(autoincrement())
  title             String
  lessons           Lesson[]
  courseId          Int
  course            Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime? 
}

model Lesson {
  id                Int            @id @default(autoincrement())
  title             String
  hours             Float
  lessonType        LessonType
  video             Video?
  article           Article?
  assignment        Assignment?
  chapterId         Int
  chapter           Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  comments          Comment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime? 
}

enum LessonType {
  VIDEO
  ARTICLE
  ASSIGNMENT
}

model Video {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  url             String
  lessonId        Int            @unique
  lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Article {
  id              Int            @id @default(autoincrement())
  content         Json
  lessonId        Int            @unique
  lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Assignment {
  id              Int            @id @default(autoincrement())
  lessonId        Int            @unique
  lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Comment {
  id                Int            @id @default(autoincrement())
  content           String
  partentId         Int?
  partent           Comment?       @relation("replies", fields: [partentId], references: [id], onDelete: Cascade)           
  replies           Comment[]      @relation("replies")
  lessonId          Int
  lesson            Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
}

model Log {
  id                Int            @id @default(autoincrement())
  operationType     OperationType
  ModelName         LogModel
  details           Json
  userId            Int
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
}

enum LogModel {
  ROLE
  USER
  CATEGORY
  SUBCATEGORY
  TOPIC
}

enum OperationType {
  ADD
  UPDATE
  DELETE
}