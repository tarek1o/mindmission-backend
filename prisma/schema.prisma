generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id             Int         @id @default(autoincrement())
  name           String      
  slug           String      @unique
  description    String?
  allowedModels  Json[]     
  isBlocked      Boolean     @default(false)
  isDeleted      Boolean     @default(false)
  users          User[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?  
}

model User {
  id                    Int         @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String      @unique
  isEmailVerified       Boolean     @default(false)
  password              String
  mobilePhone           String?
  whatsAppNumber        String?
  bio                   String?
  picture               String?
  refreshToken          String?
  resetPasswordCode     Json?
  passwordUpdatedTime   DateTime?
  isOnline              Boolean     @default(false)
  isActive              Boolean     @default(true)
  isBlocked             Boolean     @default(false)
  isDeleted             Boolean     @default(false)
  roleId                Int
  role                  Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  student               Student?    
  instructor            Instructor?
  admin                 Admin?
  logs                  Log[]
  personalLinks         PersonalLink[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime? 
}

model PersonalLink {
  id              Int            @id @default(autoincrement())
  platform        Platform
  link            String
  userId          Int
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
  @@unique([userId, platform])
}

enum Platform {
  X
  LINKEDIN
  FACEBOOK
  YOUTUBE
  WEBSITE
}


model Admin {
  id              Int            @id @default(autoincrement())
  userId          Int            @unique
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Student {
  id                  Int                @id @default(autoincrement())
  enrolledCourses     Course[]           @relation("enrolled")
  wishlistCourses     Course[]           @relation("wishlist")
  ratings             Rating[]
  userId              Int                @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime? 
}

model Instructor {
  id              Int          @id @default(autoincrement())
  specialization  String
  bref            String?
  teachingType    TeachingType
  videoProAcademy VideoProAcademy 
  haveAudience    HaveAudience
  skills          Skill[]
  courses         Course[]
  ratings         Rating[]
  userId          Int          @unique
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime? 
}

enum TeachingType {
  ONLINE
  OFFLINE
  BOTH
  OTHER
}

enum VideoProAcademy {
  BEGINNER
  SOME_KNOLEFGE
  EXPERIENCE
  HAVE_VIDEOS
}

enum HaveAudience {
  NO
  SMALL
  SIZEABLE
}

model Skill {
  id              Int            @id @default(autoincrement())
  name            String
  slug            String
  instructorId    Int
  instructor      Instructor     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
  @@unique([slug, instructorId])
}

model Rating {
  id                    Int          @id @default(autoincrement())
  courseRate            Float?
  instructorRate        Float?
  commentForCourse      String?
  commentForInstructor  String?
  studentId             Int
  student               Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId              Int
  course                Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)    
  instructorId          Int
  instructor            Instructor   @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime? 
  @@unique([studentId, courseId, instructorId])
}
model Category {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String           @unique
  description     String?
  type            CategoryType
  parentId        Int?
  parent          Category?        @relation("self", fields: [parentId], references: [id], onDelete: Cascade)
  childern        Category[]       @relation("self")
  courses         Course[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime? 
}

enum CategoryType {
  CATEGORY
  SUBCATEGORY
  TOPIC
}

model Course {
  id                 Int            @id @default(autoincrement())
  title              String
  slug               String
  shortDescription   String
  description        String
  language           Language
  level              CourseLevel
  imageCover         String
  requirements       String[]
  courseTeachings    String[]
  price              Float
  discountPercentage Float          @default(0)
  isApproved         Boolean        @default(false)
  publishedAt        DateTime?
  chapters           Chapter[]
  ratings            Rating[]       
  enrolledStudents   Student[]      @relation("enrolled")
  wishlistStudents   Student[]      @relation("wishlist")
  instructorId       Int
  instructor         Instructor     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  topicId            Int
  topic              Category       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime? 
}

enum Language {
  AR
  EN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Chapter {
  id                Int            @id @default(autoincrement())
  title             String
  slug              String
  lessons           Lesson[]
  courseId          Int
  course            Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
}

model Lesson {
  id                Int            @id @default(autoincrement())
  title             String
  slug              String
  isFree            Boolean        @default(false)
  attachment        String?
  lessonType        LessonType
  video             Video?
  article           Article?
  quiz              Quiz?
  chapterId         Int
  chapter           Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  comments          Comment[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime? 
}

enum LessonType {
  VIDEO
  ARTICLE
  Quiz
}

model Video {
  id              Int            @id @default(autoincrement())
  title           String
  slug            String
  description     String?
  url             String
  lessonId        Int            @unique
  lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Article {
  id              Int            @id @default(autoincrement())
  title           String
  slug            String
  content         String
  lessonId        Int            @unique
  lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Quiz {
  id              Int            @id @default(autoincrement())
  lessonId        Int            @unique
  questions       Question[]
  lesson          Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Question {
  id              Int            @id @default(autoincrement())
  questionText    String
  choiceA         String
  choiceB         String
  choiceC         String?
  choiceD         String?
  correctAnswer   String
  quizId          Int
  quiz            Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime? 
}

model Comment {
  id                Int            @id @default(autoincrement())
  content           String
  partentId         Int?
  partent           Comment?       @relation("replies", fields: [partentId], references: [id], onDelete: Cascade)           
  replies           Comment[]      @relation("replies")
  lessonId          Int
  lesson            Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
}

model Log {
  id                Int            @id @default(autoincrement())
  operationType     OperationType
  ModelName         LogModel
  details           Json
  userId            Int
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
}

enum LogModel {
  ROLE
  USER
  CATEGORY
  SUBCATEGORY
  TOPIC
}

enum OperationType {
  ADD
  UPDATE
  DELETE
}